!<arch>
0-isupper.c/    0           0     0     644     177       `
#include <stdio.h>


/**
 * _isupper - checks for uppercase character
 * @c: the character to be checked
 * Return: 1 if c is uppercase, 0 otherwise
 */
int _isupper(int c)
{
}

0-memset.c/     0           0     0     644     256       `
#include <stdio.h>

/**
 * *_memset - fills memory with a constant byte
 * @s: memory area to be filled
 * @b: char to copy
 * @n: number of times to copy b
 *
 * Return: pointer to the memory area s
 */
char *_memset(char *s, char b, unsigned int n)
{

}
0-strcat.c/     0           0     0     644     215       `
#include <stdio.h>

/**
 * _strcat - concatenates two strings
 * @dest: string to append to
 * @src: string to add
 *
 * Return: a pointer to the resulting string
 */
char *_strcat(char *dest, char *src, int n)
{
}

100-atoi.c/     0           0     0     644     172       `
#include <stdio.h>

/**
 * _atoi - converts a string to an integer
 * @s: string to be converted
 *
 * Return: the int converted from the string
 */
int _atoi(char *s)
{
}
1-isdigit.c/    0           0     0     644     166       `
#include <stdio.h>

/**
 * _isdigit - checks for a digit (0 through 9)
 * @c: int to be checked
 * Return: 1 if c is a digit, 0 otherwise
 */
int _isdigit(int c)
{
}
1-memcpy.c/     0           0     0     644     247       `
#include <stdio.h>

/**
 * *_memcpy - copies memory area
 * @dest: destination memory area
 * @src: memory area to copy from
 * @n: number of bytes to copy
 *
 * Return: pointer to dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
}

1-strncat.c/    0           0     0     644     287       `
#include <stdio.h>

/**
 * _strncat - concatenates n bytes from a string to another
 * @dest: destination string
 * @src: source string
 * @n: number of bytes of str to concatenate
 *
 * Return: a pointer to the resulting string dest
 */
char *_strncat(char *dest, char *src, int n)
{
}

2-strchr.c/     0           0     0     644     278       `
#include <stdio.h>

/**
 * *_strchr - locates a character in a string
 * @s: string to search
 * @c: char to find
 *
 * Return: a pointer to the first occurrence of the character
 * c in the string s, or NULL if the character is not found
 */
char *_strchr(char *s, char c)
{
}
2-strlen.c/     0           0     0     644     162       `
#include <stdio.h>

/**
 * _strlen - returns the length of a string
 * @s: string to evaluate
 *
 * Return: the length of the string
 */
int _strlen(char *s)
{
}
2-strncpy.c/    0           0     0     644     236       `
#include <stdio.h>

/**
 * _strncpy - copies a string
 * @dest: destination string
 * @src: source string
 * @n: number of bytes to copy
 *
 * Return: pointer to the resulting string
 */
char *_strncpy(char *dest, char *src, int n)
{
}
3-islower.c/    0           0     0     644     171       `
#include <stdio.h>

/**
 * _islower - checks for lowercase character
 * @c: the character to check
 * Return: 1 if c is lowercase, 0 otherwise
 */
int _islower(int c)
{
}

3-puts.c/       0           0     0     644     129       `
#include <stdio.h>

/**
 * _puts - prints a string to stdout
 * @str: pointer to the string to print
 */
void _puts(char *s)
{
}

3-strcmp.c/     0           0     0     644     272       `
#include <stdio.h>

/**
 * _strcmp - compares two strings
 * @s1: first string to compare
 * @s2: second string to compare
 *
 * Return: less than 0 if s1 is less than s2, 0 if they're equal,
 * more than 0 if s1 is greater than s2
 */
int _strcmp(char *s1, char *s2)
{
}
3-strspn.c/     0           0     0     644     326       `
#include <stdio.h>

/**
 * *_strspn - gets the length of a prefix substring
 * @s: string to evaluate
 * @accept: string containing the list of characters to match in s
 *
 * Return: the number of bytes in the initial segment
 * of s which consist only of bytes from accept
 */
unsigned int _strspn(char *s, char *accept)
{
}
4-isalpha.c/    0           0     0     644     176       `
#include <stdio.h>

/**
 * _isalpha - checks for alphabetic character
 * @c: the character to be checked
 * Return: 1 if c is a letter, 0 otherwise
 */
int _isalpha(int c)
{
}
4-stprbrk.c/    0           0     0     644     62        `
#include <stdio.h>

char *_strpbrk(char *s, char *accept)
{
}
4-strpbrk.c/    0           0     0     644     318       `
#include <stdio.h>

/**
 * *_strpbrk - searches a string for any of a set of bytes
 * @s: string to search
 * @accept: stringcontaining the bytes to look for
 *
 * Return: pointer to the byte in s that matches one of the bytes in accept
 * or NULL if no such byte is found
 */
char*_strpbrk(char *s, char *accept)
{
}
5-strstr.c/     0           0     0     644     283       `
#include <stdio.h>

/**
 * *_strstr - locates a substring
 * @haystack: string to search in
 * @needle: substring to look for
 *
 * Return: pointer to the beginning of the located substring
 * or NULL if the substring is not found
 */
char *_strstr(char *haystack, char *needle)
{
}

6-abs.c/        0           0     0     644     161       `
#include <stdio.h>

/**
 * _abs - computes the absolute value of an integer
 * @n: the int to check
 * Return: the absolute value of int
 */
int _abs(int n)
{
}

9-strcpy.c/     0           0     0     644     322       `
#include <stdio.h>

/**
 * *_strcpy - copies the string pointed to by src
 * including the terminating null byte (\0)
 * to the buffer pointed to by dest
 * @dest: pointer to the buffer in which we copy the string
 * @src: string to be copied
 *
 * Return: the pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
}
libmy.c/        0           0     0     644     730       `
#include <stdio.h>

int _putchar(char c)
{
}
int _islower(int c)
{
}
int _isalpha(int c)
{
}
int _abs(int n)
{
}
int _isupper(int c)
{
}
int _isdigit(int c)
{
}
int _strlen(char *s)
{
}
void _puts(char *s)
{
}
char *_strcpy(char *dest, char *src)
{
}
int _atoi(char *s)
{
}
char *_strcat(char *dest, char *src)
{
}
char *_strncat(char *dest, char *src, int n)
{
}
char *_strncpy(char *dest, char *src, int n)
{
}
int _strcmp(char *s1, char *s2)
{
}
char *_memset(char *s, char b, unsigned int n)
{
}
char *_memcpy(char *dest, char *src, unsigned int n)
{
}
char *_strchr(char *s, char c)
{
}
unsigned int _strspn(char *s, char *accept)
{
}
char *_strpbrk(char *s, char *accept)
{
}
char *_strstr(char *haystack, char *needle)
{
}
_putchar.c/     0           0     0     644     220       `
#include <stdio.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{

}
strpbrk.c/      0           0     0     644     62        `
#include <stdio.h>

char *_strpbrk(char *s, char *accept)
{
}
